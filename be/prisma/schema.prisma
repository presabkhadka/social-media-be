generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum GenderEnums {
  MALE
  FEMALE
}

enum RequestStatus {
  PENDING
  ACCEPETED
  REJECTED
}

model User {
  id               Int             @id @default(autoincrement())
  firstname        String
  lastname         String
  age              Int
  gender           GenderEnums
  avatar           String?
  email            String          @unique
  password         String
  UserPosts        UserPosts[]
  UserMessage      UserMessage[]
  sentRequests     FriendRequest[] @relation("SentRequests")
  recievedRequests FriendRequest[] @relation("RecieveRequests")
  Friendship       Friendship[]

  friendsInitiated Friendship[] @relation("FriendshipUser1")
  friendsReceived  Friendship[] @relation("FriendshipUser2")
}

model Posts {
  id        Int         @id @default(autoincrement())
  likes     Int
  comment   String
  UserPosts UserPosts[]
}

model Messages {
  id          Int           @id @default(autoincrement())
  content     String
  UserMessage UserMessage[]
}

model UserPosts {
  user_id Int
  post_id Int

  user User  @relation(fields: [user_id], references: [id], onDelete: Cascade)
  post Posts @relation(fields: [post_id], references: [id], onDelete: Cascade)

  @@id([user_id, post_id])
}

model UserMessage {
  user_id    Int
  message_id Int

  user    User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
  message Messages @relation(fields: [message_id], references: [id], onDelete: Cascade)

  @@id([user_id, message_id])
}

model FriendRequest {
  id         Int           @id @default(autoincrement())
  senderId   Int
  receiverId Int
  status     RequestStatus
  createdAt  DateTime      @default(now())

  sender   User @relation("SentRequests", fields: [senderId], references: [id], onDelete: Cascade)
  reciever User @relation("RecieveRequests", fields: [receiverId], references: [id], onDelete: Cascade)
}

model Friendship {
  id      Int      @id @default(autoincrement())
  user1   User     @relation("FriendshipUser1", fields: [user1Id], references: [id], onDelete: Cascade)
  user1Id Int
  user2   User     @relation("FriendshipUser2", fields: [user2Id], references: [id], onDelete: Cascade)
  user2Id Int
  since   DateTime @default(now())
  User    User?    @relation(fields: [userId], references: [id])
  userId  Int?

  @@unique([user1Id, user2Id])
}
